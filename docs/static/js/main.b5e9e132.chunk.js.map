{"version":3,"sources":["Components/AddCategory.js","Helpers/GetGifs.js","Components/GifGridItem.js","Components/GifGrid.js","Hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","uri","encodeURI","fetch","peticion","json","data","gifs","map","gif","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGif","gf","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAEpC,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMhB,SACE,uBAAOO,KAAK,OAAOC,MAAQT,EAAaU,SAhBvB,SAACP,GACpBF,EAAeE,EAAEQ,OAAOF,Y,mCCPfG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UAAUH,GAF3C,+DAGEI,MAAMF,GAHR,cAGfG,EAHe,gBAIEA,EAASC,OAJX,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBF,QAVhB,kBAcdL,GAdc,4CAAH,sDCCL,SAASQ,EAAT,GAAsC,IAAfJ,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IAC3C,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAQL,EAAMM,IAAQP,IAC3B,4BAAKA,OCDI,SAASQ,EAAT,GAAgC,IAAbpB,EAAY,EAAZA,SAEhC,ECJyB,SAAEA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRzB,EAASC,GAAWyB,MAAM,SAAAjB,GAAI,OAC1Be,EAAS,CACPhB,KAAMC,EACNa,SAAS,SAGd,CAAErB,IAEEsB,EDXwBI,CAAa1B,GAA/BQ,EAAb,EAAQD,KAAWc,EAAnB,EAAmBA,QAEnB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDjB,IACpD,mBAAGiB,UAAU,mCAAb,SACII,GAAW,aAEf,qBAAKJ,UAAU,YAAf,SAEIT,EAAKC,KAAK,SAAAkB,GACR,OAAO,cAACX,EAAD,eAAkCW,GAAbA,EAAGhB,YEd5B,SAASiB,IAEtB,MAAoC1C,mBAAS,CAAC,cAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,8CACA,cAACD,EAAD,CAAaC,cAAkBA,IAC/B,uBAGE4C,EAAWpB,KAAK,SAAAT,GACd,OAAO,cAACoB,EAAD,CAASpB,SAAaA,GAAmBA,S,MCV1D8B,IAASC,OACP,cAACH,EAAD,IACAI,SAASC,eAAe,W","file":"static/js/main.b5e9e132.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function AddCategory({ setCategories }) {\r\n  \r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleChange = (e) => {\r\n    setInputValue( e.target.value )\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    if ( inputValue.trim().length > 2 ) {\r\n      setCategories( cats => [ inputValue, ...cats ] )\r\n      setInputValue('')\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit } >\r\n      <input type='text' value={ inputValue } onChange={ handleChange } />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async ( category) => {\r\n\r\n  const uri = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=DT9UWgW5mJ7AygyOXas2NCsI92qCbiVf`\r\n  const peticion = await fetch(uri)\r\n  const { data } = await peticion.json()\r\n\r\n  const gifs = data.map((gif) => {\r\n    return {\r\n      id: gif.id,\r\n      title: gif.title,\r\n      url: gif.images.downsized_medium.url\r\n    }\r\n  })\r\n\r\n  return gifs\r\n}","import React from 'react'\r\n\r\nexport default function GifGridItem({ title, url }) {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src = { url } alt = { title } />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","\r\nimport React from 'react';\r\nimport { useFetchGif } from '../Hooks/useFetchGif';\r\nimport GifGridItem from './GifGridItem'\r\n\r\nexport default function GifGrid({ category }) {\r\n\r\n  const { data:gifs, loading } = useFetchGif( category )\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n      <p className='animate__animated animate__flash'>\r\n        { loading && 'Cargando'}\r\n      </p>\r\n      <div className='card-grid'>\r\n        {\r\n          gifs.map( gf => {\r\n            return <GifGridItem key = { gf.id } { ...gf } />\r\n          })\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifs } from '../Helpers/GetGifs';\r\n\r\nexport const useFetchGif = ( category ) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifs( category ).then( gifs =>\r\n        setstate({\r\n          data: gifs,\r\n          loading: false\r\n        })\r\n    )\r\n  }, [ category ])\r\n\r\n  return state\r\n}","import React, { useState } from 'react'\r\nimport AddCategory from './Components/AddCategory'\r\nimport GifGrid from './Components/GifGrid'\r\n\r\nexport default function GifExpertApp() {\r\n\r\n  const [categories, setCategories] = useState(['One Punch'])\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories = { setCategories } />\r\n      <hr />\r\n\r\n      {\r\n        categories.map( category => {\r\n          return <GifGrid category = { category } key = { category } />\r\n        })\r\n      }\r\n      \r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}